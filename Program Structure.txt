"""
Created on Thu July 13 10:30 2017

@author: irvin.ding

"""

The motivation of this program is to use genetic programming technics to proximate a formula for calculating theoretical values of options. Given that we anticipate the theoretical value is correlated with bid price, ask price, bid volume, ask volume, greeks, etc., we can try to randomly combining these inputs with different computational operations to find a satisfying formula to estimate theoretical values for a period of time. Practically, we pass a set of variables into the algo and run the evolution process. The main idea of evolution is to initialize a generation with a pre-set population size, each individual in a tree structure representing a formula, and then conduct mutation and crossover on the tree structures over generations. The evaluating process is done by a customized fitness function, which I have been using ordinary least squares so far. For each run, we set a mutation probability, which defines the rate of any chosen node to switch with one in the elements set, and a crossover probability, which defines the rate of any chosen node to switch with another chosen node in another tree in the same generation. We can also specify the amount of best individuals to pass on to the next generations. There are two working implementations so far: pySTEP and OpenCLGA. pySTEP implementation is entirely built on Python (2.7). The pySTEP library is designed for computation simulation and thus the only part one needs to change in terms of using this program for our purpose is parameters.py file (other settings have already been adjusted). The OpenCLGA library calls the OpenCL platform for computation with genetic programming. More settings need to be specified in both theo.py and theo.cl, which I detailed in another documentation.